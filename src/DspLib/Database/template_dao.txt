<?php

/**
 * Database object (DAO) for table {table_name}
 *
 * Generated the {date_generated} by the php script make_dao.php
 */
class DAO{class_name} extends DAO
{
	/**
	 * Indique si l'enregistrement est nouveau ou s'il existe déjà en base
	 * 
	 * @var boolean
	 */
    private $bIsNew = true;

	/**
	 * Liste des champs qui ont été modifiés
	 * 
	 * @var array
	 */
    private $aUpdatedFields = array();

    /**
     * Liste des champs de la table
     *
     * @var array
     */
    private static $aFields = array(<!-- BEGIN Fields -->
    	'{Fields.name}',<!-- END Fields -->
    );

    /**
     * Liste des clefs primaires de la table
     * 
     * @var array
     */
    private static $aPrimaryKeys = array(<!-- BEGIN PrimaryKeys -->
    	'{PrimaryKeys.name}',<!-- END PrimaryKeys -->
    );

    /**
     * Liste des clefs de la table
     * 
     * @var array
     */
    private static $aKeys = array(<!-- BEGIN Keys -->
    	'{Keys.name}' => array(<!-- BEGIN Keys.Fields -->
    		'{Keys.Fields.name}',<!-- END Keys.Fields -->
    	),<!-- END Keys -->
    );
    
    // FIELDS
    
    <!-- BEGIN Fields -->
    /**
     * @var {Fields.type}
     */
    private ${Fields.prop_name};
    
    <!-- END Fields -->
    
    /**
     * Charge le contenu de l'objet avec les champs
     * 
     * @param array $aFields tableau associatif des champs
     */
    public function loadFields($aFields)
    {
    	foreach (self::$aPrimaryKeys as $sKey)
    	{
    		if (isset($aFields[$sKey]))
    		{
    			$this->bIsNew = false;
    		}
    	}
    	
    	<!-- BEGIN Fields -->
    	$this->{Fields.prop_name} = $aFields['{Fields.name}'];<!-- END Fields -->
    }
    
    /**
     * Sauvegarde l'enregistrement en base de données
     */
    public function persist()
    {
    	if (empty($this->aUpdatedFields))
    	{
    		return;
    	}
    	
    	
    	$aFieldList = $this->aUpdatedFields;
    	
    	if ($this->bIsNew)
    	{
    		$sQuery = "INSERT INTO {table_name} (\n";
    		$sQuery .= implode(', ', $this->aUpdatedFields) . "\n";
    		$sQuery .= ") VALUES (\n";
    		$aValues = array();
    		foreach ($this->aUpdatedFields as $sFieldName)
    		{
    			$aValues[] = ":$sFieldName";
    		}
    		$sQuery .= implode(', ', $aValues);
    		$sQuery .= ")";
    	}
    	else
    	{
    		$sQuery = "UPDATE {table_name} SET\n";
    		$aValues = array();
    		foreach ($this->aUpdatedFields as $sFieldName)
    		{
    			$aValues[] = "$sFieldName = :$sFieldName";
    		}
    		$sQuery .= implode(', ', $aValues);
    		
    		$aConditions = array();
    		foreach (self::$aPrimaryKeys as $sKey)
    		{
    			if ($this->getFieldValue($sKey) == '')
    			{
    				throw new \Exception(get_class($this) . ' persist error : Primary Key ' . $sKey . ' was not supplied for update');
    			}
    			$aConditions[] = "$sKey = :$sKey";
    			$aFieldList[] = $sKey;
    		}
    		$sCondition = implode(' AND ', $aConditions);
    		$sQuery .= " WHERE " . $sCondition;
    	}

    	$aParams = array();
		foreach ($aFieldList as $sFieldName)
		{
			$aParams[$sFieldName] = $this->getFieldValue($sFieldName);
		}
		
		//var_dump($sQuery); var_dump($aParams); die();    	
		
    	$oDb = DSPDatabase::getInstance();
    	$oStmt = $oDb->query($sQuery, $aParams);
    	
    	if ($this->bIsNew) {
    		$aPrimaryKeys = $this->getPrimaryKeys();
    		if (count($aPrimaryKeys) == 1) {
    			$iId = $oDb->getLastInsertId();
    			if (is_numeric($iId) && $iId > 0) {
    				$this->setFieldValue($aPrimaryKeys[0], $iId);
    			}
    		}
    	}
    	
    	$this->bIsNew = false;
    	$this->aUpdatedFields = array();
    }
    
    // GETTERS AND SETTERS
    
    /**
     * Indique si l'enregistrement est nouveau, ou s'il a déjà été persisté
     *
     * @return boolean
     */
    public function isNew()
    {
    	return $this->bIsNew;
    }
    
    /**
     * Renvoie la valeur d'un champ à partir du nom du champ en base de données
     * 
     * @param string $sFieldName Nom du champ en base de données
     * @return string
     */
    public function getFieldValue($sFieldName)
    {
    	switch ($sFieldName)
    	{
    		<!-- BEGIN Fields -->
    		case '{Fields.name}':
    			return $this->{Fields.prop_name};
    			break;
    		<!-- END Fields -->
    		default:
    			// TODO gestion d'erreur ?
    			return null;
    			break;
    	}
    }
    
    /**
     * Définit la valeur d'un champ à partir du nom du champ en base de données
     * 
     * @param string $sFieldName Nom du champ en base de données
     * @param mixed $mValue Valeur du champ
     */
    public function setFieldValue($sFieldName, $mValue)
    {
    	switch ($sFieldName)
    	{
    		<!-- BEGIN Fields -->
    		case '{Fields.name}':
    			$this->{Fields.prop_name} = $mValue;
    			break;
    		<!-- END Fields -->
    		default:
    			// TODO gestion d'erreur ?
    			return null;
    			break;
    	}
    }
    
    <!-- BEGIN Fields -->
    /**
     * Renvoie le contenu du champ {Fields.name}
     * 
     * @return string
     */
    public function get{Fields.prop_name_maj}()
    {
    	return $this->{Fields.prop_name};
    }
    
    /**
     * Définit le contenu du champ {Fields.name}
     * 
     * @param string ${Fields.prop_name} valeur du champ
     */
    public function set{Fields.prop_name_maj}(${Fields.prop_name})
    {
    	$this->aUpdatedFields[] = '{Fields.name}';
    	$this->{Fields.prop_name} = ${Fields.prop_name};
    }
    
    <!-- END Fields -->

	public static function getPrimaryKeys()
	{
		if (empty(self::$aPrimaryKeys))
		{
			<!-- BEGIN PrimaryKeys -->
			self::$aPrimaryKeys[] = '{PrimaryKeys.name}';<!-- END PrimaryKeys -->
		}
		return self::$aPrimaryKeys;
	}
	
	/**
	 * Renvoie la liste des champs de la table {table_name}
	 *
	 * @return array
	 */
	public static function getFields()
	{
		return self::$aFields;
	}
	 
	/**
	 * Renvoie la liste des clefs de la table {table_name}
	 * 
	 * @return array
	 */   
	public static function getKeys()
	{
		return self::$aKeys;
	}
	
    <!-- BEGIN Keys -->
    /**
     * Cherche un enregistrement en base à partir des champs (<!-- BEGIN Keys.Fields -->{Keys.Fields.name} <!-- END Keys.Fields -->)
     * 
     * <!-- BEGIN Keys.Fields -->
     * @param string ${Keys.prop_name} Valeur du champ {Keys.Fields.name}<!-- END Keys.Fields -->
     * @return DAO{class_name}
     */
    public static function getBy{Keys.prop_name_maj}({Keys.method_args}) {
        $oDb = DSPDatabase::getInstance();

        $sQuery = "SELECT <!-- BEGIN Fields -->
        	{Fields.name}, <!-- END Fields -->
        	1
        FROM {table_name}
        ";

		$aCond = array();
		<!-- BEGIN Keys.Fields -->
		$aCond[] = "{Keys.Fields.name} = :{Keys.Fields.name}";
		<!-- END Keys.Fields -->
		
		$sQuery .= "WHERE " . implode(' AND ', $aCond);

        $aParams = array(
        	<!-- BEGIN Keys.Fields -->
            '{Keys.Fields.name}' => ${Keys.Fields.prop_name},<!-- END Keys.Fields -->
        );
        
        $oStmt = $oDb->query($sQuery, $aParams);

        $aFields = $oStmt->fetch();

        if ($aFields)
        {
            $oDAO = new DAO{class_name}();
            $oDAO->loadFields($aFields);
            return $oDAO;
        }
        return false;
    }
    <!-- END Keys -->
    
    public static function getAll() {
    	$oDb = \DspLib\Database::getInstance();
    	
    	$sQuery = "SELECT <!-- BEGIN Fields -->
        	{Fields.name}, <!-- END Fields -->
        	1
        FROM {table_name}";
        
        $oStmt = $oDb->query($sQuery);
        
        return $oStmt->fetchAll();
    }
    
    // METHODES D'ACCES AUX TABLES LIEES
    
    <!-- BEGIN OneToMany -->
    /**
     * Ajoute un enregistrement dans la table {OneToMany.linked_table}
     lié à celui-ci par la clef {OneToMany.foreign_key}
     */
    public function add{OneToMany.linked_class}($aFields) {
    	$oDb = \DspLib\Database::getInstance();
    	
    	$aFields['{OneToMany.foreign_key}'] = $this->{OneToMany.foreign_key_prop_name};
    	
    	$sFieldNames = implode(', ', array_keys($aFields));
    	
    	$aParamNames = array();
    	foreach (array_keys($aFields) as $sParam) {
    		$aParamNames[] = ':' . $sParam;
    	}
    	$sParamNames = implode(', ', $aParamNames);
    	
    	$sQuery = "INSERT INTO {OneToMany.linked_table} (
    		$sFieldNames
    	) VALUES (
    		$sParamNames
    	)";
    	
    	$oDb->query($sQuery, $aFields);
    }
    
    /**
     * Renvoie la liste des enregistrements de la table {OneToMany.linked_table} 
     * qui sont liés à celui-ci par la clef {OneToMany.foreign_key}
     * 
     * @return array
     */
    public function get{OneToMany.linked_class}s() {
    	$oDb = \DspLib\Database::getInstance();

        $sQuery = "SELECT <!-- BEGIN OneToMany.Fields -->
        	{OneToMany.Fields.name}, <!-- END OneToMany.Fields -->
        	1
        FROM {OneToMany.linked_table}
        WHERE {OneToMany.foreign_key} = :{OneToMany.foreign_key}";

        $aParams = array(
            '{OneToMany.foreign_key}' => $this->{OneToMany.foreign_key_prop_name}
        );
        
        $oStmt = $oDb->query($sQuery, $aParams);

		$aReturn = array();
        while($aFields = $oStmt->fetch())
        {
        	$oDAO = new DAO{OneToMany.linked_class}();
        	$oDAO->loadFields($aFields);
        	$aReturn[] = $oDAO;
        }

        return $aReturn;
    }
    <!-- END OneToMany -->
    
    <!-- BEGIN ManyToOne -->
    /**
     * Renvoie l'enregistrement de la table {ManyToOne.linked_table} lié à celui-ci
     * par la clef {ManyToOne.foreign_key}
     *
     * @return DAO{ManyToOne.linked_class}
     */
    public function get{ManyToOne.linked_class}() {
    	$oObj = DAO{ManyToOne.linked_class}::getBy{ManyToOne.foreign_key_prop_name}($this->get{ManyToOne.foreign_key_prop_name}());
    	return $oObj;
    }
    <!-- END ManyToOne -->
    
    <!-- BEGIN ManyToMany -->
    /**
     * Renvoie les enregistrements de la table {ManyToMany.linked_table}
     * qui sont liés à celui-ci par la table {ManyToMany.join_table}
     * 
     * @return array
     */
    public function get{ManyToMany.linked_class}s() {
    	$oDb = \DspLib\Database::getInstance();
    	
    	$sQuery = "SELECT <!-- BEGIN ManyToMany.Fields -->
	    	{ManyToMany.Fields.name}, <!-- END ManyToMany.Fields -->
	    	1
		FROM {ManyToMany.linked_table}
		JOIN {ManyToMany.join_table} ON {ManyToMany.linked_table}.{ManyToMany.linked_primary_key} = {ManyToMany.join_table}.{ManyToMany.foreign_key} 
		WHERE {ManyToMany.join_table}.{ManyToMany.primary_key} = :{ManyToMany.primary_key}";
		
		$aParams = array(
			'{ManyToMany.primary_key}' => $this->{ManyToMany.primary_key_prop_name}
		);
		
		$oStmt = $oDb->query($sQuery, $aParams);

		return $oStmt->fetchAll();
    }
    
    /**
     * Crée un enregistrement dans la table {ManyToMany.linked_table} 
     * lié à celui-ci par la table {ManyToMany.join_table} 
     *
     * @param DAO{ManyToMany.linked_class} $o{ManyToMany.linked_class} Entité {ManyToMany.linked_class} (table {ManyToMany.linked_table})
     * @param array $aFields Champs en plus à insérer dans la table {ManyToMany.join_table}
     */
    public function addObj{ManyToMany.linked_class}(DAO{ManyToMany.linked_class} $o{ManyToMany.linked_class}, array $aFields = array()) {
    	if ($this->bIsNew) {
    		$this->persist();
    	}
    
    	$oDb = DSPDatabase::getInstance();

		$aFieldNames = array('{ManyToMany.primary_key}', '{ManyToMany.foreign_key}');
		$aFieldNames = array_merge($aFieldNames, array_keys($aFields));
		$sFieldNames = implode(', ', $aFieldNames);
		
		$aFieldParamNames = $aFieldNames;
		foreach ($aFieldParamNames as $i => $sField) {
			$aFieldParamNames[$i] = ':' . $sField;
		}
    	$sFieldParamNames = implode(', ', $aFieldParamNames);
    	
    	$sQuery = "
    		INSERT INTO {ManyToMany.join_table} (
    			$sFieldNames
    		) VALUES (
    			$sFieldParamNames
			)    		
    	";
    	
    	$aParams = array(
    		'{ManyToMany.primary_key}' => $this->{ManyToMany.primary_key_prop_name},
    		'{ManyToMany.foreign_key}' => $o{ManyToMany.linked_class}->getFieldValue('{ManyToMany.linked_primary_key}')
    	);
    	$aParams = array_merge($aParams, $aFields);
    	
    	$oStmt = $oDb->query($sQuery, $aParams);
    }
        
    /**
     * Crée un enregistrement dans la table {ManyToMany.linked_table} 
     * lié à celui-ci par la table {ManyToMany.join_table} 
     *
     * @param int $i{ManyToMany.foreign_key_prop_name} Identifiant de la table {ManyToMany.linked_table}
     * @param array $aFields Champs en plus à insérer dans la table {ManyToMany.join_table}
     */
    public function add{ManyToMany.linked_class}($i{ManyToMany.foreign_key_prop_name}, array $aFields = array()) {
    	if ($this->bIsNew) {
    		$this->persist();
    	}
    
    	$oDb = \DspLib\Database::getInstance();

		$aFieldNames = array('{ManyToMany.primary_key}', '{ManyToMany.foreign_key}');
		$aFieldNames = array_merge($aFieldNames, array_keys($aFields));
		$sFieldNames = implode(', ', $aFieldNames);
		
		$aFieldParamNames = $aFieldNames;
		foreach ($aFieldParamNames as $i => $sField) {
			$aFieldParamNames[$i] = ':' . $sField;
		}
    	$sFieldParamNames = implode(', ', $aFieldParamNames);
    	
    	$sQuery = "
    		INSERT INTO {ManyToMany.join_table} (
    			$sFieldNames
    		) VALUES (
    			$sFieldParamNames
			)    		
    	";
    	
    	$aParams = array(
    		'{ManyToMany.primary_key}' => $this->{ManyToMany.primary_key_prop_name},
    		'{ManyToMany.foreign_key}' => $i{ManyToMany.foreign_key_prop_name}
    	);
    	$aParams = array_merge($aParams, $aFields);
    	
    	$oStmt = $oDb->query($sQuery, $aParams);
    }
    <!-- END ManyToMany -->
    
    
}

